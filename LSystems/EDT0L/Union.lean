/-
Copyright (c) 2025 Alex Bishop. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Alex Bishop
-/
import LSystems.EDT0L.Defs

namespace EDT0LGrammar
variable {T N‚ÇÄ H‚ÇÄ N‚ÇÅ H‚ÇÅ : Type*} [Fintype N‚ÇÄ] [Fintype H‚ÇÄ] [Fintype N‚ÇÅ] [Fintype H‚ÇÅ]

structure UnionData where
  E‚ÇÄ : EDT0LGrammar T N‚ÇÄ H‚ÇÄ
  E‚ÇÅ : EDT0LGrammar T N‚ÇÅ H‚ÇÅ

namespace UnionData
variable (ùìñ : @UnionData T N‚ÇÄ H‚ÇÄ N‚ÇÅ H‚ÇÅ _ _ _ _)

def extend_alphabet‚ÇÄ : Symbol T N‚ÇÄ ‚Üí Symbol T ((N‚ÇÄ ‚äï N‚ÇÅ) ‚äï Unit)
  | .terminal t => .terminal t
  | .nonterminal n => .nonterminal (.inl (.inl n))

def extend_alphabet‚ÇÅ : Symbol T N‚ÇÅ ‚Üí Symbol T ((N‚ÇÄ ‚äï N‚ÇÅ) ‚äï Unit)
  | .terminal t => .terminal t
  | .nonterminal n => .nonterminal (.inl (.inr n))

section extend_alphabets
variable {T N‚ÇÄ N‚ÇÅ : Type*}

@[simp]
lemma extend_alphabet‚ÇÄ_terminal (t : T) :
    @extend_alphabet‚ÇÄ T N‚ÇÄ N‚ÇÅ (.terminal t) = (.terminal t) := rfl

@[simp]
lemma extend_alphabet‚ÇÅ_terminal (t : T) :
    @extend_alphabet‚ÇÅ T N‚ÇÄ N‚ÇÅ (.terminal t) = (.terminal t) := rfl

@[simp]
lemma extend_alphabet‚ÇÄ_nonterminal (n : N‚ÇÄ) :
    @extend_alphabet‚ÇÄ T N‚ÇÄ N‚ÇÅ (.nonterminal n) = (.nonterminal <| .inl <| .inl <| n) := rfl

@[simp]
lemma extend_alphabet‚ÇÅ_nonterminal (n : N‚ÇÅ) :
    @extend_alphabet‚ÇÅ T N‚ÇÄ N‚ÇÅ (.nonterminal n) = (.nonterminal <| .inl <| .inr <| n) := rfl

@[simp]
lemma extend_alphabet‚ÇÄ_terminal_word (w : List T) :
    List.map (@extend_alphabet‚ÇÄ T N‚ÇÄ N‚ÇÅ) (List.map .terminal w)
    = List.map .terminal w := by
  --
  induction w
  ¬∑ simp only [List.map_nil]
  ¬∑ rename_i a as ih
    simp_all only [
      List.map_map, List.map_inj_left,
      Function.comp_apply, List.map_cons, List.cons.injEq, implies_true,
      and_true]
    rfl

@[simp]
lemma extend_alphabet‚ÇÅ_terminal_word (w : List T) :
    List.map (@extend_alphabet‚ÇÅ T N‚ÇÄ N‚ÇÅ) (List.map .terminal w)
    = List.map .terminal w := by
  --
  induction w
  ¬∑ simp only [List.map_nil]
  ¬∑ rename_i a as ih
    simp_all only [
      List.map_map, List.map_inj_left,
      Function.comp_apply, List.map_cons, List.cons.injEq, implies_true,
      and_true]
    rfl

end extend_alphabets

def grammar : EDT0LGrammar T ((N‚ÇÄ ‚äï N‚ÇÅ) ‚äï Unit) ((H‚ÇÄ ‚äï H‚ÇÅ) ‚äï Fin 2) where
  initial := .inr ()
  tables := fun h n ‚Ü¶ match h with
    | .inl (.inl œÑ‚ÇÄ) => match n with
      | .inl (.inl n‚ÇÄ) => (ùìñ.E‚ÇÄ.tables œÑ‚ÇÄ n‚ÇÄ).map extend_alphabet‚ÇÄ
      | _ => [.nonterminal n]
    | .inl (.inr œÑ‚ÇÅ) => match n with
      | .inl (.inr n‚ÇÅ) => (ùìñ.E‚ÇÅ.tables œÑ‚ÇÅ n‚ÇÅ).map extend_alphabet‚ÇÅ
      | _ => [.nonterminal n]
    | .inr 0 => match n with
      | .inl s => [.nonterminal (.inl s)]
      | .inr _ => [.nonterminal (.inl (.inl ùìñ.E‚ÇÄ.initial))]
    | .inr 1 => match n with
      | .inl s => [.nonterminal (.inl s)]
      | .inr _ => [.nonterminal (.inl (.inr ùìñ.E‚ÇÅ.initial))]

lemma left_rewrites (w : List (Symbol T ((N‚ÇÄ ‚äï N‚ÇÅ) ‚äï Unit)))
  (w' : List (Symbol T ((N‚ÇÄ ‚äï N‚ÇÅ) ‚äï Unit)))
  (h : ‚àÉ u : List (Symbol T N‚ÇÄ), w = u.map extend_alphabet‚ÇÄ ‚àß ùìñ.E‚ÇÄ.Generates u) :
    ùìñ.grammar.Rewrites w w'
      ‚Üí ‚àÉ u' : List (Symbol T N‚ÇÄ), w' = u'.map extend_alphabet‚ÇÄ ‚àß ùìñ.E‚ÇÄ.Generates u' := by
  --
  intro h‚ÇÅ
  have ‚ü®u, ‚ü®h_l, h_r‚ü©‚ü© := h
  clear h
  unfold EDT0LGrammar.Rewrites at h‚ÇÅ
  unfold EDT0LGrammar.RewriteWord at h‚ÇÅ
  unfold EDT0LGrammar.RewriteSymbol at h‚ÇÅ
  unfold UnionData.grammar at h‚ÇÅ
  unfold extend_alphabet‚ÇÄ at h_l
  simp only at h‚ÇÅ
  subst h_l
  replace ‚ü®œÑ, h‚ÇÅ‚ü© := h‚ÇÅ
  simp [List.flatMap_map] at h‚ÇÅ
  match œÑ with
  | .inl (.inl œÑ‚ÇÄ) =>
      simp only at h‚ÇÅ
      change
        let inner := _;
        @List.flatMap _ _ inner _ = _
        at h‚ÇÅ
      extract_lets inner at h‚ÇÅ
      have hh : inner = fun a ‚Ü¶ List.map extend_alphabet‚ÇÄ (ùìñ.E‚ÇÄ.RewriteSymbol œÑ‚ÇÄ a) := by
        unfold extend_alphabet‚ÇÄ
        unfold inner
        funext a
        subst h‚ÇÅ
        clear œÑ
        --FIXME aesop?
        split
        ¬∑ rename_i x t heq
          split at heq
          ¬∑ rename_i x_1 t_1
            simp_all only [Symbol.terminal.injEq]
            subst heq
            rfl
          ¬∑ rename_i x_1 n
            simp_all only [reduceCtorEq]
        ¬∑ rename_i x n heq
          cases n with
          | inl val =>
            cases val with
            | inl val_1 =>
              simp_all only
              split at heq
              next x_1 t => simp_all only [reduceCtorEq]
              next x_1 n =>
                simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq]
                subst heq
                rfl
            | inr val_2 =>
              simp_all only
              split at heq
              next x_1 t => simp_all only [reduceCtorEq]
              next x_1 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
          | inr val_1 =>
            simp_all only
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
      rw [hh] at h‚ÇÅ
      clear hh
      clear inner

      rw [‚Üê List.flatMap_map] at h‚ÇÅ
      rw [‚Üê List.map_flatMap] at h‚ÇÅ
      change
        let u' := _;
        List.map extend_alphabet‚ÇÄ u' = _
        at h‚ÇÅ
      extract_lets u' at h‚ÇÅ
      use u'
      constructor
      ¬∑ exact Eq.symm h‚ÇÅ
      ¬∑ have hh : ùìñ.E‚ÇÄ.Rewrites u u' := by
          use œÑ‚ÇÄ
          unfold RewriteWord
          subst u'
          rw [List.flatMap_id', ‚Üê List.flatMap_def]
        unfold EDT0LGrammar.Generates
        unfold EDT0LGrammar.Generates at h_r
        unfold EDT0LGrammar.Derives
        unfold EDT0LGrammar.Derives at h_r
        exact Relation.ReflTransGen.tail h_r hh
  | .inl (.inr œÑ‚ÇÅ) =>
    simp only at h‚ÇÅ
    change
      let inner := _;
      @List.flatMap _ _ inner _ = _
      at h‚ÇÅ
    extract_lets inner at h‚ÇÅ
    have hh : inner = fun a ‚Ü¶ [extend_alphabet‚ÇÄ a] := by
      unfold inner
      funext a
      clear h‚ÇÅ
      clear inner
      clear œÑ
      -- aesop
      split
      next x t heq =>
        simp_all only [List.cons.injEq, and_true]
        split at heq
        next x_1 t_1 =>
          simp_all only [Symbol.terminal.injEq]
          subst heq
          rfl
        next x_1 n => simp_all only [reduceCtorEq]
      next x n heq =>
        cases n with
        | inl val =>
          cases val with
          | inl val_1 =>
            simp_all only [List.cons.injEq, and_true]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n =>
              simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq]
              subst heq
              rfl
          | inr val_2 =>
            simp_all only [List.map_eq_singleton_iff]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
        | inr val_1 =>
          simp_all only [List.cons.injEq, and_true]
          split at heq
          next x_1 t => simp_all only [reduceCtorEq]
          next x_1 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
    use u
    rw [‚Üê h‚ÇÅ, hh]
    constructor
    ¬∑ rw [‚Üê List.map_eq_flatMap]
    ¬∑ exact h_r
  | .inr 0 =>
    simp only at h‚ÇÅ
    change
      let inner := _;
      @List.flatMap _ _ inner _ = _
      at h‚ÇÅ
    extract_lets inner at h‚ÇÅ
    have hh : inner = fun a ‚Ü¶ [extend_alphabet‚ÇÄ a] := by
      unfold inner
      funext a
      clear h‚ÇÅ
      clear inner
      clear œÑ
      -- aesop
      split
      next x t heq =>
        simp_all only [List.cons.injEq, and_true]
        split at heq
        next x_1 t_1 =>
          simp_all only [Symbol.terminal.injEq]
          subst heq
          rfl
        next x_1 n => simp_all only [reduceCtorEq]
      next x n heq =>
        cases n with
        | inl val =>
          cases val with
          | inl val_1 =>
            simp_all only [List.cons.injEq, and_true]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n =>
              simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq]
              subst heq
              rfl
          | inr val_2 =>
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
        | inr val_1 =>
          simp_all only [List.cons.injEq, and_true]
          split at heq
          next x_1 t => simp_all only [reduceCtorEq]
          next x_1 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
    use u
    rw [‚Üê h‚ÇÅ, hh]
    constructor
    ¬∑ rw [‚Üê List.map_eq_flatMap]
    ¬∑ exact h_r
  | .inr 1 =>
    simp only at h‚ÇÅ
    change
      let inner := _;
      @List.flatMap _ _ inner _ = _
      at h‚ÇÅ
    extract_lets inner at h‚ÇÅ
    have hh : inner = fun a ‚Ü¶ [extend_alphabet‚ÇÄ a] := by
      unfold inner
      funext a
      clear h‚ÇÅ
      clear inner
      clear œÑ
      -- aesop
      split
      next x t heq =>
        simp_all only [List.cons.injEq, and_true]
        split at heq
        next x_1 t_1 =>
          simp_all only [Symbol.terminal.injEq]
          subst heq
          rfl
        next x_1 n => simp_all only [reduceCtorEq]
      next x n heq =>
        cases n with
        | inl val =>
          cases val with
          | inl val_1 =>
            simp_all only [List.cons.injEq, and_true]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n =>
              simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq]
              subst heq
              rfl
          | inr val_2 =>
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
        | inr val_1 =>
          simp_all only [List.cons.injEq, and_true]
          split at heq
          next x_1 t => simp_all only [reduceCtorEq]
          next x_1 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
    use u
    rw [‚Üê h‚ÇÅ, hh]
    constructor
    ¬∑ rw [‚Üê List.map_eq_flatMap]
    ¬∑ exact h_r

lemma right_rewrites (w : List (Symbol T ((N‚ÇÄ ‚äï N‚ÇÅ) ‚äï Unit)))
  (w' : List (Symbol T ((N‚ÇÄ ‚äï N‚ÇÅ) ‚äï Unit)))
  (h : ‚àÉ u : List (Symbol T N‚ÇÅ), w = u.map extend_alphabet‚ÇÅ ‚àß ùìñ.E‚ÇÅ.Generates u) :
    ùìñ.grammar.Rewrites w w'
      ‚Üí ‚àÉ u' : List (Symbol T N‚ÇÅ), w' = u'.map extend_alphabet‚ÇÅ ‚àß ùìñ.E‚ÇÅ.Generates u' := by
  intro h‚ÇÅ
  have ‚ü®u, ‚ü®h_l, h_r‚ü©‚ü© := h
  clear h
  unfold EDT0LGrammar.Rewrites at h‚ÇÅ
  unfold EDT0LGrammar.RewriteWord at h‚ÇÅ
  unfold EDT0LGrammar.RewriteSymbol at h‚ÇÅ
  unfold UnionData.grammar at h‚ÇÅ
  unfold extend_alphabet‚ÇÅ at h_l
  simp only at h‚ÇÅ
  subst h_l
  replace ‚ü®œÑ, h‚ÇÅ‚ü© := h‚ÇÅ
  simp [List.flatMap_map] at h‚ÇÅ
  match œÑ with
  | .inl (.inr œÑ‚ÇÅ) =>
      simp only at h‚ÇÅ
      change
        let inner := _;
        @List.flatMap _ _ inner _ = _
        at h‚ÇÅ
      extract_lets inner at h‚ÇÅ
      have hh : inner = fun a ‚Ü¶ List.map extend_alphabet‚ÇÅ (ùìñ.E‚ÇÅ.RewriteSymbol œÑ‚ÇÅ a) := by
        unfold extend_alphabet‚ÇÅ
        unfold inner
        funext a
        subst h‚ÇÅ
        clear œÑ
        --FIXME aesop?
        split
        next x t heq =>
          split at heq
          next x_1 t_1 =>
            simp_all only [Symbol.terminal.injEq]
            subst heq
            rfl
          next x_1 n => simp_all only [reduceCtorEq]
        next x n heq =>
          cases n with
          | inl val =>
            cases val with
            | inl val_1 =>
              simp_all only
              split at heq
              next x_1 t => simp_all only [reduceCtorEq]
              next x_1 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
            | inr val_2 =>
              simp_all only
              split at heq
              next x_1 t => simp_all only [reduceCtorEq]
              next x_1 n =>
                simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, Sum.inr.injEq]
                subst heq
                rfl
          | inr val_1 =>
            simp_all only
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
      rw [hh] at h‚ÇÅ
      clear hh
      clear inner

      rw [‚Üê List.flatMap_map] at h‚ÇÅ
      rw [‚Üê List.map_flatMap] at h‚ÇÅ
      change
        let u' := _;
        List.map extend_alphabet‚ÇÅ u' = _
        at h‚ÇÅ
      extract_lets u' at h‚ÇÅ
      use u'
      constructor
      ¬∑ exact Eq.symm h‚ÇÅ
      ¬∑ have hh : ùìñ.E‚ÇÅ.Rewrites u u' := by
          use œÑ‚ÇÅ
          unfold RewriteWord
          subst u'
          rw [List.flatMap_id', ‚Üê List.flatMap_def]
        unfold EDT0LGrammar.Generates
        unfold EDT0LGrammar.Generates at h_r
        unfold EDT0LGrammar.Derives
        unfold EDT0LGrammar.Derives at h_r
        exact Relation.ReflTransGen.tail h_r hh
  | .inl (.inl œÑ‚ÇÄ) =>
    simp only at h‚ÇÅ
    change
      let inner := _;
      @List.flatMap _ _ inner _ = _
      at h‚ÇÅ
    extract_lets inner at h‚ÇÅ
    have hh : inner = fun a ‚Ü¶ [extend_alphabet‚ÇÅ a] := by
      unfold inner
      funext a
      clear h‚ÇÅ
      clear inner
      clear œÑ
      -- aesop
      split
      next x t heq =>
        simp_all only [List.cons.injEq, and_true]
        split at heq
        next x_1 t_1 =>
          simp_all only [Symbol.terminal.injEq]
          subst heq
          rfl
        next x_1 n => simp_all only [reduceCtorEq]
      next x n heq =>
        cases n with
        | inl val =>
          cases val with
          | inl val_1 =>
            simp_all only [List.map_eq_singleton_iff]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
          | inr val_2 =>
            simp_all only [List.cons.injEq, and_true]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n =>
              simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, Sum.inr.injEq]
              subst heq
              rfl
        | inr val_1 =>
          simp_all only [List.cons.injEq, and_true]
          split at heq
          next x_1 t => simp_all only [reduceCtorEq]
          next x_1 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
    use u
    rw [‚Üê h‚ÇÅ, hh]
    constructor
    ¬∑ rw [‚Üê List.map_eq_flatMap]
    ¬∑ exact h_r
  | .inr 0 =>
    simp only at h‚ÇÅ
    change
      let inner := _;
      @List.flatMap _ _ inner _ = _
      at h‚ÇÅ
    extract_lets inner at h‚ÇÅ
    have hh : inner = fun a ‚Ü¶ [extend_alphabet‚ÇÅ a] := by
      unfold inner
      funext a
      clear h‚ÇÅ
      clear inner
      clear œÑ
      -- aesop
      split
      next x t heq =>
        simp_all only [List.cons.injEq, and_true]
        split at heq
        next x_1 t_1 =>
          simp_all only [Symbol.terminal.injEq]
          subst heq
          rfl
        next x_1 n => simp_all only [reduceCtorEq]
      next x n heq =>
        cases n with
        | inl val =>
          cases val with
          | inl val_1 =>
            simp_all only [List.cons.injEq, and_true]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
          | inr val_2 =>
            simp_all only [List.cons.injEq, and_true]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n =>
              simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, Sum.inr.injEq]
              subst heq
              rfl
        | inr val_1 =>
          simp_all only [List.cons.injEq, and_true]
          split at heq
          next x_1 t => simp_all only [reduceCtorEq]
          next x_1 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
    use u
    rw [‚Üê h‚ÇÅ, hh]
    constructor
    ¬∑ rw [‚Üê List.map_eq_flatMap]
    ¬∑ exact h_r
  | .inr 1 =>
    simp only at h‚ÇÅ
    change
      let inner := _;
      @List.flatMap _ _ inner _ = _
      at h‚ÇÅ
    extract_lets inner at h‚ÇÅ
    have hh : inner = fun a ‚Ü¶ [extend_alphabet‚ÇÅ a] := by
      unfold inner
      funext a
      clear h‚ÇÅ
      clear inner
      clear œÑ
      -- aesop
      split
      next x t heq =>
        simp_all only [List.cons.injEq, and_true]
        split at heq
        next x_1 t_1 =>
          simp_all only [Symbol.terminal.injEq]
          subst heq
          rfl
        next x_1 n => simp_all only [reduceCtorEq]
      next x n heq =>
        cases n with
        | inl val =>
          cases val with
          | inl val_1 =>
            simp_all only [List.cons.injEq, and_true]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
          | inr val_2 =>
            simp_all only [List.cons.injEq, and_true]
            split at heq
            next x_1 t => simp_all only [reduceCtorEq]
            next x_1 n =>
              simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, Sum.inr.injEq]
              subst heq
              rfl
        | inr val_1 =>
          simp_all only [List.cons.injEq, and_true]
          split at heq
          next x_1 t => simp_all only [reduceCtorEq]
          next x_1 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
    use u
    rw [‚Üê h‚ÇÅ, hh]
    constructor
    ¬∑ rw [‚Üê List.map_eq_flatMap]
    ¬∑ exact h_r

lemma basic_property
  (w : List (Symbol T ((N‚ÇÄ ‚äï N‚ÇÅ) ‚äï Unit)))
  (h : ùìñ.grammar.Generates w) :
    w = [.nonterminal ùìñ.grammar.initial]
    ‚à® (‚àÉ u : List (Symbol T N‚ÇÄ), w = u.map extend_alphabet‚ÇÄ ‚àß ùìñ.E‚ÇÄ.Generates u)
    ‚à® (‚àÉ u : List (Symbol T N‚ÇÅ), w = u.map extend_alphabet‚ÇÅ ‚àß ùìñ.E‚ÇÅ.Generates u) := by
  --
  induction h
  case refl => left; rfl
  case tail a b ih‚ÇÅ ih‚ÇÇ ih‚ÇÉ =>
    cases ih‚ÇÉ
    ¬∑ rename_i ih‚ÇÉ
      -- we are rewriting the starting symbol
      replace ‚ü®œÑ, ih‚ÇÇ‚ü© := ih‚ÇÇ
      match œÑ with
      | .inl (.inl œÑ‚ÇÄ) =>
        left
        rw [‚Üê ih‚ÇÇ, ih‚ÇÉ]
        unfold EDT0LGrammar.RewriteWord
        unfold EDT0LGrammar.RewriteSymbol
        unfold UnionData.grammar
        simp only
        rw [List.flatMap_cons, List.flatMap_nil, List.append_nil]
      | .inl (.inr œÑ‚ÇÅ) =>
        left
        rw [‚Üê ih‚ÇÇ, ih‚ÇÉ]
        unfold EDT0LGrammar.RewriteWord
        unfold EDT0LGrammar.RewriteSymbol
        unfold UnionData.grammar
        simp only
        rw [List.flatMap_cons, List.flatMap_nil, List.append_nil]
      | .inr 0 =>
        right ; left
        use [.nonterminal ùìñ.E‚ÇÄ.initial]
        constructor
        ¬∑ rw [‚Üê ih‚ÇÇ, ih‚ÇÉ]
          unfold extend_alphabet‚ÇÄ
          unfold EDT0LGrammar.RewriteWord
          unfold EDT0LGrammar.RewriteSymbol
          unfold UnionData.grammar
          simp only
          rw [List.map_cons, List.map_nil, List.flatMap_cons, List.flatMap_nil, List.append_nil]
        ¬∑ unfold EDT0LGrammar.Generates
          unfold EDT0LGrammar.Derives
          exact Relation.ReflTransGen.refl
      | .inr 1 =>
        right ; right
        use [.nonterminal ùìñ.E‚ÇÅ.initial]
        constructor
        ¬∑ rw [‚Üê ih‚ÇÇ, ih‚ÇÉ]
          unfold extend_alphabet‚ÇÅ
          unfold EDT0LGrammar.RewriteWord
          unfold EDT0LGrammar.RewriteSymbol
          unfold UnionData.grammar
          simp only
          rw [List.map_cons, List.map_nil, List.flatMap_cons, List.flatMap_nil, List.append_nil]
        ¬∑ unfold EDT0LGrammar.Generates
          unfold EDT0LGrammar.Derives
          exact Relation.ReflTransGen.refl
    ¬∑ rename_i ih‚ÇÉ
      cases ih‚ÇÉ
      ¬∑ rename_i ih‚ÇÉ
        right; left
        exact ùìñ.left_rewrites a b ih‚ÇÉ ih‚ÇÇ
      ¬∑ rename_i ih‚ÇÉ
        right; right
        exact ùìñ.right_rewrites a b ih‚ÇÉ ih‚ÇÇ

lemma basic_property‚ÇÄ
  (w : List (Symbol T N‚ÇÄ))
  (h : ùìñ.E‚ÇÄ.Generates w) :
    ùìñ.grammar.Generates (w.map extend_alphabet‚ÇÄ) := by
  --
  induction h
  case refl =>
    unfold EDT0LGrammar.Generates
    unfold EDT0LGrammar.Derives
    apply Relation.ReflTransGen.tail (Relation.ReflTransGen.refl) ?_
    unfold EDT0LGrammar.Rewrites
    use .inr 0
    unfold EDT0LGrammar.RewriteWord
    unfold EDT0LGrammar.RewriteSymbol
    unfold UnionData.grammar
    simp only
    unfold extend_alphabet‚ÇÄ
    simp only [List.flatMap_cons, List.flatMap_nil, List.append_nil, List.map_cons, List.map_nil]
  case tail x y z ih‚ÇÅ ih‚ÇÇ =>
    have hh :
        ùìñ.grammar.Rewrites
          (List.map extend_alphabet‚ÇÄ x)
          (List.map extend_alphabet‚ÇÄ y) := by
      have ‚ü® œÑ, h ‚ü© := ih‚ÇÅ
      rw [‚Üê h]
      use .inl (.inl œÑ)
      unfold EDT0LGrammar.RewriteWord
      unfold EDT0LGrammar.RewriteSymbol
      unfold UnionData.grammar
      --
      unfold extend_alphabet‚ÇÄ
      simp only
      simp only [List.flatMap_map, List.map_flatMap]
      clear h
      clear z
      change
        let f_l := List.flatMap _;
        let f_r := List.flatMap _;
        f_l x = f_r x
      extract_lets f_l f_r
      have hh : f_l = f_r := by
        unfold f_l
        unfold f_r
        funext xx
        induction xx
        ¬∑ simp only [List.flatMap_nil]
        ¬∑ rename_i a as ih
          -- aesop
          simp_all only [List.flatMap_cons, List.append_cancel_right_eq]
          split
          next x_1 t heq =>
            split
            next x_2 t_1 => simp_all only [Symbol.terminal.injEq, List.map_cons, List.map_nil]
            next x_2 n => simp_all only [reduceCtorEq]
          next x_1 n heq =>
            cases n with
            | inl val =>
              cases val with
              | inl val_1 =>
                simp_all only
                split
                next x_2 t => simp_all only [reduceCtorEq]
                next x_2 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq]
              | inr val_2 =>
                simp_all only
                split
                next x_2 t => simp_all only [reduceCtorEq]
                next x_2 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
            | inr val_1 =>
              simp_all only
              split
              next x_2 t => simp_all only [reduceCtorEq]
              next x_2 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
      rw [hh]
    unfold EDT0LGrammar.Generates
    unfold EDT0LGrammar.Generates at ih‚ÇÇ
    unfold EDT0LGrammar.Derives
    unfold EDT0LGrammar.Derives at ih‚ÇÇ
    exact Relation.ReflTransGen.tail ih‚ÇÇ hh

lemma basic_property‚ÇÅ
  (w : List (Symbol T N‚ÇÅ))
  (h : ùìñ.E‚ÇÅ.Generates w) :
    ùìñ.grammar.Generates (w.map extend_alphabet‚ÇÅ) := by
  --
  induction h
  case refl =>
    unfold EDT0LGrammar.Generates
    unfold EDT0LGrammar.Derives
    apply Relation.ReflTransGen.tail (Relation.ReflTransGen.refl) ?_
    unfold EDT0LGrammar.Rewrites
    use .inr 1
    unfold EDT0LGrammar.RewriteWord
    unfold EDT0LGrammar.RewriteSymbol
    unfold UnionData.grammar
    simp only
    unfold extend_alphabet‚ÇÅ
    simp only [List.flatMap_cons, List.flatMap_nil, List.append_nil, List.map_cons, List.map_nil]
  case tail x y z ih‚ÇÅ ih‚ÇÇ =>
    have hh :
        ùìñ.grammar.Rewrites
          (List.map extend_alphabet‚ÇÅ x)
          (List.map extend_alphabet‚ÇÅ y) := by
      have ‚ü® œÑ, h ‚ü© := ih‚ÇÅ
      rw [‚Üê h]
      use .inl (.inr œÑ)
      unfold EDT0LGrammar.RewriteWord
      unfold EDT0LGrammar.RewriteSymbol
      unfold UnionData.grammar
      --
      unfold extend_alphabet‚ÇÅ
      simp only
      simp only [List.flatMap_map, List.map_flatMap]
      clear h
      clear z
      change
        let f_l := List.flatMap _;
        let f_r := List.flatMap _;
        f_l x = f_r x
      extract_lets f_l f_r
      have hh : f_l = f_r := by
        unfold f_l
        unfold f_r
        funext xx
        induction xx
        ¬∑ simp only [List.flatMap_nil]
        ¬∑ rename_i a as ih
          -- aesop
          simp_all only [List.flatMap_cons, List.append_cancel_right_eq]
          split
          next x_1 t heq =>
            split
            next x_2 t_1 => simp_all only [Symbol.terminal.injEq, List.map_cons, List.map_nil]
            next x_2 n => simp_all only [reduceCtorEq]
          next x_1 n heq =>
            cases n with
            | inl val =>
              cases val with
              | inl val_1 =>
                simp_all only
                split
                next x_2 t => simp_all only [reduceCtorEq]
                next x_2 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, reduceCtorEq]
              | inr val_2 =>
                simp_all only
                split
                next x_2 t => simp_all only [reduceCtorEq]
                next x_2 n => simp_all only [Symbol.nonterminal.injEq, Sum.inl.injEq, Sum.inr.injEq]
            | inr val_1 =>
              simp_all only
              split
              next x_2 t => simp_all only [reduceCtorEq]
              next x_2 n => simp_all only [Symbol.nonterminal.injEq, reduceCtorEq]
      rw [hh]
    unfold EDT0LGrammar.Generates
    unfold EDT0LGrammar.Generates at ih‚ÇÇ
    unfold EDT0LGrammar.Derives
    unfold EDT0LGrammar.Derives at ih‚ÇÇ
    exact Relation.ReflTransGen.tail ih‚ÇÇ hh

theorem defines_union : ùìñ.grammar.language = ùìñ.E‚ÇÄ.language + ùìñ.E‚ÇÅ.language := by
  rw [Language.add_def]
  unfold EDT0LGrammar.language
  --
  have h (w : List T) :
      ùìñ.grammar.Generates (List.map Symbol.terminal w)
      ‚Üî ùìñ.E‚ÇÄ.Generates (List.map Symbol.terminal w)
        ‚à® ùìñ.E‚ÇÅ.Generates (List.map Symbol.terminal w) := by
    --
    constructor
    ¬∑ intro h
      replace h := ùìñ.basic_property _ h
      match h with
      | .inl h =>
        exfalso
        -- aesop?
        simp_all only [
          true_or, List.map_eq_singleton_iff, reduceCtorEq, and_false, exists_false]
      | .inr (.inl h') =>
        --
        replace h := h'
        clear h'
        left
        replace ‚ü®u, ‚ü®h_l, h_r‚ü©‚ü© := h
        have hh : List.map Symbol.terminal w = u := by
          clear h_r
          clear h
          induction u generalizing w
          ¬∑ simp_all only [List.map_nil, List.map_eq_nil_iff]
          ¬∑ rename_i a as ih
            -- unfold extend_alphabet‚ÇÄ at ih
            simp_all only [List.map_cons]
            have hh : w ‚â† [] := by
              simp_all only [ne_eq]
              intro a_1
              subst a_1
              simp_all only [List.map_nil, List.nil_eq, reduceCtorEq]
            replace hh : ‚àÉ b bs, w = b :: bs := by
              exact List.ne_nil_iff_exists_cons.mp hh
            replace ‚ü®b, bs, hh‚ü© := hh
            subst hh
            unfold List.map
            conv at h_l =>
              lhs
              unfold List.map
            replace ih := ih bs
            have h‚ÇÅ : Symbol.terminal b = @extend_alphabet‚ÇÄ T N‚ÇÄ N‚ÇÅ a := by
              simp_all only [List.cons.injEq, forall_const]
            have h‚ÇÇ :
                List.map Symbol.terminal bs =
                List.map (@extend_alphabet‚ÇÄ T N‚ÇÄ N‚ÇÅ) as := by
              simp_all only [List.cons.injEq, true_and, forall_const]
            replace ih := ih h‚ÇÇ
            rw [‚Üê ih]
            unfold extend_alphabet‚ÇÄ at h‚ÇÅ
            replace h‚ÇÅ : Symbol.terminal b = a := by
              match a with
              | .terminal t =>
                subst ih
                simp_all only [
                  Symbol.terminal.injEq,
                  List.map_map, List.map_inj_left, Function.comp_apply,
                  List.cons.injEq, implies_true, and_true]
              | .nonterminal n =>
                simp only at h‚ÇÅ
                exfalso
                simp_all only [reduceCtorEq]
            rw [h‚ÇÅ]
        rw [hh]
        exact h_r
      | .inr (.inr h') =>
        --
        replace h := h'
        clear h'
        right
        replace ‚ü®u, ‚ü®h_l, h_r‚ü©‚ü© := h
        have hh : List.map Symbol.terminal w = u := by
          clear h_r
          clear h
          induction u generalizing w
          ¬∑ simp_all only [List.map_nil, List.map_eq_nil_iff]
          ¬∑ rename_i a as ih
            -- unfold extend_alphabet‚ÇÄ at ih
            simp_all only [List.map_cons]
            have hh : w ‚â† [] := by
              simp_all only [ne_eq]
              intro a_1
              subst a_1
              simp_all only [List.map_nil, List.nil_eq, reduceCtorEq]
            replace hh : ‚àÉ b bs, w = b :: bs := by
              exact List.ne_nil_iff_exists_cons.mp hh
            replace ‚ü®b, bs, hh‚ü© := hh
            subst hh
            unfold List.map
            conv at h_l =>
              lhs
              unfold List.map
            replace ih := ih bs
            have h‚ÇÅ : Symbol.terminal b = @extend_alphabet‚ÇÅ T N‚ÇÄ N‚ÇÅ a := by
              simp_all only [List.cons.injEq, forall_const]
            have h‚ÇÇ :
                List.map Symbol.terminal bs =
                List.map (@extend_alphabet‚ÇÅ T N‚ÇÄ N‚ÇÅ) as := by
              simp_all only [List.cons.injEq, true_and, forall_const]
            replace ih := ih h‚ÇÇ
            rw [‚Üê ih]
            unfold extend_alphabet‚ÇÅ at h‚ÇÅ
            replace h‚ÇÅ : Symbol.terminal b = a := by
              match a with
              | .terminal t =>
                subst ih
                simp_all only [
                  Symbol.terminal.injEq,
                  List.map_map, List.map_inj_left, Function.comp_apply,
                  List.cons.injEq, implies_true, and_true]
              | .nonterminal n =>
                simp only at h‚ÇÅ
                exfalso
                simp_all only [reduceCtorEq]
            rw [h‚ÇÅ]
        rw [hh]
        exact h_r
    ¬∑ intro h
      cases h
      ¬∑ rename_i h
        have hh := ùìñ.basic_property‚ÇÄ _ h
        rw [extend_alphabet‚ÇÄ_terminal_word] at hh
        exact hh
      ¬∑ rename_i h
        have hh := ùìñ.basic_property‚ÇÅ _ h
        rw [extend_alphabet‚ÇÅ_terminal_word] at hh
        exact hh
  exact Language.ext_iff.mpr h

end UnionData

theorem closed_under_union (L‚ÇÅ L‚ÇÇ : Language T)
  (h‚ÇÅ : L‚ÇÅ.IsEDT0L)
  (h‚ÇÇ : L‚ÇÇ.IsEDT0L) :
    (L‚ÇÅ + L‚ÇÇ).IsEDT0L := by
  have ‚ü®_, _ , E‚ÇÅ, P‚ÇÅ‚ü© := h‚ÇÅ
  have ‚ü®_, _ , E‚ÇÇ, P‚ÇÇ‚ü© := h‚ÇÇ
  let union_data := UnionData.mk E‚ÇÅ E‚ÇÇ
  have h := union_data.defines_union
  have ‚ü®n,m,E',P'‚ü© := union_data.grammar.edt0l_grammars_generate_edt0l_languages
  use n, m, E'
  rw [P', h]
  unfold union_data
  rw [P‚ÇÅ, P‚ÇÇ]

end EDT0LGrammar
