import LSystems.EDT0L.Defs
import LSystems.EDT0L.Union
import LSystems.FiniteIndexEDT0L.Defs

namespace EDT0LGrammar

namespace UnionData

section helpers
variable {T N‚ÇÄ N‚ÇÅ : Type*}

lemma extend_alphabet‚ÇÄ_is_nonterminal (s : Symbol T N‚ÇÄ) :
    SymbolIsNonterminal s = (SymbolIsNonterminal <| @extend_alphabet‚ÇÄ T N‚ÇÄ N‚ÇÅ <| s) := by
  unfold extend_alphabet‚ÇÄ
  split <;> rfl

lemma extend_alphabet‚ÇÅ_is_nonterminal (s : Symbol T N‚ÇÅ) :
    SymbolIsNonterminal s = (SymbolIsNonterminal <| @extend_alphabet‚ÇÅ T N‚ÇÄ N‚ÇÅ <| s) := by
  unfold extend_alphabet‚ÇÅ
  split <;> rfl

lemma extend_alphabet‚ÇÄ_map_count (w : List (Symbol T N‚ÇÄ)) :
    w.countP SymbolIsNonterminal
    = (w.map (@extend_alphabet‚ÇÄ T N‚ÇÄ N‚ÇÅ)).countP SymbolIsNonterminal := by
  induction w with
  | nil => simp only [List.countP_nil, List.map_nil]
  | cons a as ih =>
    simp only [List.map_cons, List.countP_cons]
    rw [ih]
    rw [extend_alphabet‚ÇÄ_is_nonterminal]

lemma extend_alphabet‚ÇÅ_map_count (w : List (Symbol T N‚ÇÅ)) :
    w.countP SymbolIsNonterminal
    = (w.map (@extend_alphabet‚ÇÅ T N‚ÇÄ N‚ÇÅ)).countP SymbolIsNonterminal := by
  induction w with
  | nil => simp only [List.countP_nil, List.map_nil]
  | cons a as ih =>
    simp only [List.map_cons, List.countP_cons]
    rw [ih]
    rw [extend_alphabet‚ÇÅ_is_nonterminal]

end helpers

variable {T N‚ÇÄ H‚ÇÄ N‚ÇÅ H‚ÇÅ : Type*} [Fintype N‚ÇÄ] [Fintype H‚ÇÄ] [Fintype N‚ÇÅ] [Fintype H‚ÇÅ]
variable (ùìñ : @UnionData T N‚ÇÄ H‚ÇÄ N‚ÇÅ H‚ÇÅ _ _ _ _)

theorem closed_under_union' {k‚ÇÅ k‚ÇÇ : ‚Ñï}
  (h‚ÇÄ : ùìñ.E‚ÇÄ.IsIndex k‚ÇÅ)
  (h‚ÇÅ : ùìñ.E‚ÇÅ.IsIndex k‚ÇÇ) :
    ùìñ.grammar.IsIndex (Nat.max k‚ÇÅ k‚ÇÇ) := by
  --
  unfold IsIndex
  intro w h
  replace h := ùìñ.basic_property w h
  obtain rfl | ‚ü®u, ‚ü®rfl, h‚ü©‚ü© | ‚ü®u, ‚ü®rfl, h‚ü©‚ü© := h
  ¬∑ calc List.countP SymbolIsNonterminal [Symbol.nonterminal ùìñ.grammar.initial]
      _ = 1 := SymbolIsNonterminal_single_nonterminal _
      _ ‚â§ k‚ÇÅ := index_at_least_one _ h‚ÇÄ
      _ ‚â§ Nat.max k‚ÇÅ k‚ÇÇ := le_sup_left
  ¬∑ rw [‚Üê extend_alphabet‚ÇÄ_map_count]
    replace h := generates_implies_le_index ùìñ.E‚ÇÄ u h‚ÇÄ h
    simp only [le_sup_iff, h, true_or]
  ¬∑ rw [‚Üê extend_alphabet‚ÇÅ_map_count]
    replace h := generates_implies_le_index ùìñ.E‚ÇÅ u h‚ÇÅ h
    simp only [le_sup_iff, h, or_true]

end UnionData

theorem finite_index_closed_under_union {T : Type*} {k‚ÇÅ k‚ÇÇ : ‚Ñï} (L‚ÇÅ L‚ÇÇ : Language T)
  (h‚ÇÅ : L‚ÇÅ.IsEDT0LOfIndex k‚ÇÅ)
  (h‚ÇÇ : L‚ÇÇ.IsEDT0LOfIndex k‚ÇÇ) :
    (L‚ÇÅ + L‚ÇÇ).IsEDT0LOfIndex (Nat.max k‚ÇÅ k‚ÇÇ) := by
  have ‚ü®_, _ , E‚ÇÅ, f‚ÇÅ, P‚ÇÅ‚ü© := h‚ÇÅ
  have ‚ü®_, _ , E‚ÇÇ, f‚ÇÇ, P‚ÇÇ‚ü© := h‚ÇÇ
  let union_data := UnionData.mk E‚ÇÅ E‚ÇÇ
  have h‚ÇÉ := union_data.defines_union
  have h‚ÇÑ := union_data.closed_under_union' f‚ÇÅ f‚ÇÇ
  have ‚ü®n,m,E',h',P'‚ü© := union_data.grammar.fi_edt0l_grammars_generate_fi_edt0l_languages' h‚ÇÑ
  use n, m, E', h'
  rw [P', h‚ÇÉ, P‚ÇÅ, P‚ÇÇ]

end EDT0LGrammar
